{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:34:08.354275Z\",\"iopub.execute_input\":\"2023-07-19T13:34:08.355000Z\",\"iopub.status.idle\":\"2023-07-19T13:34:50.690167Z\",\"shell.execute_reply.started\":\"2023-07-19T13:34:08.354962Z\",\"shell.execute_reply\":\"2023-07-19T13:34:50.689027Z\"}}\n!pip install qiskit\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:34:50.692743Z\",\"iopub.execute_input\":\"2023-07-19T13:34:50.693365Z\",\"iopub.status.idle\":\"2023-07-19T13:35:13.224933Z\",\"shell.execute_reply.started\":\"2023-07-19T13:34:50.693325Z\",\"shell.execute_reply\":\"2023-07-19T13:35:13.223580Z\"}}\n!pip install qiskit_machine_learning\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:35:13.230420Z\",\"iopub.execute_input\":\"2023-07-19T13:35:13.231232Z\",\"iopub.status.idle\":\"2023-07-19T13:35:26.614087Z\",\"shell.execute_reply.started\":\"2023-07-19T13:35:13.231190Z\",\"shell.execute_reply\":\"2023-07-19T13:35:26.612878Z\"}}\n!pip install qiskit tensorflow scikit-learn\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:35:26.617048Z\",\"iopub.execute_input\":\"2023-07-19T13:35:26.617856Z\",\"iopub.status.idle\":\"2023-07-19T13:35:26.954479Z\",\"shell.execute_reply.started\":\"2023-07-19T13:35:26.617816Z\",\"shell.execute_reply\":\"2023-07-19T13:35:26.953579Z\"}}\nimport qiskit\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:35:26.955829Z\",\"iopub.execute_input\":\"2023-07-19T13:35:26.956803Z\",\"iopub.status.idle\":\"2023-07-19T13:35:37.275770Z\",\"shell.execute_reply.started\":\"2023-07-19T13:35:26.956766Z\",\"shell.execute_reply\":\"2023-07-19T13:35:37.274608Z\"}}\nimport tensorflow as tf\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:35:37.277034Z\",\"iopub.execute_input\":\"2023-07-19T13:35:37.277845Z\",\"iopub.status.idle\":\"2023-07-19T13:35:37.702414Z\",\"shell.execute_reply.started\":\"2023-07-19T13:35:37.277811Z\",\"shell.execute_reply\":\"2023-07-19T13:35:37.701394Z\"}}\nimport numpy as np\nfrom qiskit import QuantumCircuit, Aer\nfrom qiskit.visualization import plot_histogram\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow.keras import layers\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:35:37.703915Z\",\"iopub.execute_input\":\"2023-07-19T13:35:37.704272Z\",\"iopub.status.idle\":\"2023-07-19T13:35:38.103321Z\",\"shell.execute_reply.started\":\"2023-07-19T13:35:37.704238Z\",\"shell.execute_reply\":\"2023-07-19T13:35:38.102314Z\"}}\n# Load the MNIST dataset\nmnist = tf.keras.datasets.mnist\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:36:19.729317Z\",\"iopub.execute_input\":\"2023-07-19T13:36:19.729854Z\",\"iopub.status.idle\":\"2023-07-19T13:36:19.998492Z\",\"shell.execute_reply.started\":\"2023-07-19T13:36:19.729816Z\",\"shell.execute_reply\":\"2023-07-19T13:36:19.997373Z\"}}\n# Normalize the data to [0, 1]\nX_train, X_test = X_train / 255.0, X_test / 255.0\n\n# Split the dataset into training and validation sets\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:38:35.924158Z\",\"iopub.execute_input\":\"2023-07-19T13:38:35.924546Z\",\"iopub.status.idle\":\"2023-07-19T13:38:35.930575Z\",\"shell.execute_reply.started\":\"2023-07-19T13:38:35.924514Z\",\"shell.execute_reply\":\"2023-07-19T13:38:35.929447Z\"}}\nfrom qiskit.circuit.library import ZZFeatureMap\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:45:06.300328Z\",\"iopub.execute_input\":\"2023-07-19T13:45:06.300724Z\",\"iopub.status.idle\":\"2023-07-19T13:45:06.305405Z\",\"shell.execute_reply.started\":\"2023-07-19T13:45:06.300693Z\",\"shell.execute_reply\":\"2023-07-19T13:45:06.304353Z\"}}\nfrom qiskit import Aer, QuantumCircuit, transpile, assemble\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:52:58.300324Z\",\"iopub.execute_input\":\"2023-07-19T13:52:58.300790Z\",\"iopub.status.idle\":\"2023-07-19T13:52:58.306767Z\",\"shell.execute_reply.started\":\"2023-07-19T13:52:58.300756Z\",\"shell.execute_reply\":\"2023-07-19T13:52:58.305573Z\"}}\n\n# Define the quantum feature map (circuit)\nnum_qubits = 4\nnum_rotations = 2\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:36:21.237939Z\",\"iopub.execute_input\":\"2023-07-19T13:36:21.238283Z\",\"iopub.status.idle\":\"2023-07-19T13:36:21.244826Z\",\"shell.execute_reply.started\":\"2023-07-19T13:36:21.238253Z\",\"shell.execute_reply\":\"2023-07-19T13:36:21.243423Z\"}}\n# # Add quantum gates to create the desired feature map\n# # For example, let's use simple Pauli-X gates\n# for i in range(num_qubits):\n#     qc.h(i)\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:53:12.019636Z\",\"iopub.execute_input\":\"2023-07-19T13:53:12.020000Z\",\"iopub.status.idle\":\"2023-07-19T13:53:12.025094Z\",\"shell.execute_reply.started\":\"2023-07-19T13:53:12.019972Z\",\"shell.execute_reply\":\"2023-07-19T13:53:12.023730Z\"}}\nfrom qiskit.quantum_info import Statevector\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:53:14.901834Z\",\"iopub.execute_input\":\"2023-07-19T13:53:14.902204Z\",\"iopub.status.idle\":\"2023-07-19T13:53:14.907113Z\",\"shell.execute_reply.started\":\"2023-07-19T13:53:14.902174Z\",\"shell.execute_reply\":\"2023-07-19T13:53:14.905984Z\"}}\n# Encode the classical images into quantum states using the quantum feature map\nbackend = Aer.get_backend('statevector_simulator')\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:46:57.038221Z\",\"iopub.execute_input\":\"2023-07-19T13:46:57.038612Z\",\"iopub.status.idle\":\"2023-07-19T13:46:57.054085Z\",\"shell.execute_reply.started\":\"2023-07-19T13:46:57.038579Z\",\"shell.execute_reply\":\"2023-07-19T13:46:57.052906Z\"}}\n# device_name = tf.test.gpu_device_name()\n# if device_name != '/device:GPU:0':\n#     print('GPU device not found. Using CPU instead.')\n#     device_name = '/device:CPU:0'\n\n# # Assign the process to a GPU\n# with tf.device(device_name):\n#     for layer in range(num_rotations):\n#         for qubit in range(num_qubits):\n#             qc.u(params[layer, qubit, 0], params[layer, qubit, 1], params[layer, qubit, 2], qubit)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:46:57.901779Z\",\"iopub.execute_input\":\"2023-07-19T13:46:57.902574Z\",\"iopub.status.idle\":\"2023-07-19T13:46:57.907982Z\",\"shell.execute_reply.started\":\"2023-07-19T13:46:57.902535Z\",\"shell.execute_reply\":\"2023-07-19T13:46:57.906650Z\"}}\n# # Encode the classical images into quantum states using the quantum feature map\n# backend = Aer.get_backend('statevector_simulator')\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:57:16.024485Z\",\"iopub.execute_input\":\"2023-07-19T13:57:16.024876Z\",\"iopub.status.idle\":\"2023-07-19T13:57:16.032355Z\",\"shell.execute_reply.started\":\"2023-07-19T13:57:16.024846Z\",\"shell.execute_reply\":\"2023-07-19T13:57:16.031146Z\"}}\ndef quantum_feature_map(image, params):\n    # Create a new quantum circuit for each image and apply the parameterized rotations\n    num_qubits = 4\n    num_rotations = 2\n    qc = QuantumCircuit(num_qubits)\n\n    for layer in range(num_rotations):\n        for qubit in range(num_qubits):\n            qc.u(params[layer, qubit, 0], params[layer, qubit, 1], params[layer, qubit, 2], qubit)\n    \n    # Get the statevector after applying the parameterized rotations\n    tqc = transpile(qc, backend)\n    job = assemble(tqc)\n    result = backend.run(job).result().get_statevector()\n    return np.real(result)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:57:19.399182Z\",\"iopub.execute_input\":\"2023-07-19T13:57:19.399561Z\",\"iopub.status.idle\":\"2023-07-19T13:57:19.418536Z\",\"shell.execute_reply.started\":\"2023-07-19T13:57:19.399530Z\",\"shell.execute_reply\":\"2023-07-19T13:57:19.417623Z\"}}\n# Generate random initial parameters for each image\nparams = np.random.rand(len(X_train), num_rotations, num_qubits, 3) * 2 * np.pi\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:57:20.405300Z\",\"iopub.execute_input\":\"2023-07-19T13:57:20.405736Z\",\"iopub.status.idle\":\"2023-07-19T14:04:19.808090Z\",\"shell.execute_reply.started\":\"2023-07-19T13:57:20.405704Z\",\"shell.execute_reply\":\"2023-07-19T14:04:19.807076Z\"}}\ndevice_name = tf.test.gpu_device_name()\nif device_name != '/device:GPU:0':\n    print('GPU device not found. Using CPU instead.')\n    device_name = '/device:CPU:0'\n\n# Assign the process to a GPU\nwith tf.device(device_name):\n    # Preprocess the data using the quantum feature map and store the results\n    quantum_train_images = np.array([quantum_feature_map(image.flatten(), params[i]) for i, image in enumerate(X_train)])\n    quantum_val_images = np.array([quantum_feature_map(image.flatten(), params[i]) for i, image in enumerate(X_val)])\n\n\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T14:05:12.733192Z\",\"iopub.execute_input\":\"2023-07-19T14:05:12.733579Z\",\"iopub.status.idle\":\"2023-07-19T14:05:12.765765Z\",\"shell.execute_reply.started\":\"2023-07-19T14:05:12.733545Z\",\"shell.execute_reply\":\"2023-07-19T14:05:12.764756Z\"}}\n# Define the classical neural network model using TensorFlow/Keras\nmodel = tf.keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(2 ** num_qubits,)),\n    layers.Dense(10, activation='softmax')\n])\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T14:05:13.891984Z\",\"iopub.execute_input\":\"2023-07-19T14:05:13.892332Z\",\"iopub.status.idle\":\"2023-07-19T14:05:13.911916Z\",\"shell.execute_reply.started\":\"2023-07-19T14:05:13.892302Z\",\"shell.execute_reply\":\"2023-07-19T14:05:13.910876Z\"}}\n# Compile the model\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T14:05:16.440913Z\",\"iopub.execute_input\":\"2023-07-19T14:05:16.441273Z\",\"iopub.status.idle\":\"2023-07-19T14:06:39.035925Z\",\"shell.execute_reply.started\":\"2023-07-19T14:05:16.441240Z\",\"shell.execute_reply\":\"2023-07-19T14:06:39.034793Z\"}}\ndevice_name = tf.test.gpu_device_name()\nif device_name != '/device:GPU:0':\n    print('GPU device not found. Using CPU instead.')\n    device_name = '/device:CPU:0'\n\n# Assign the process to a GPU\nwith tf.device(device_name):\n    # Train the model using the encoded quantum data\n    history = model.fit(quantum_train_images, y_train, epochs=10, batch_size=32, validation_data=(quantum_val_images, y_val))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T14:06:39.038097Z\",\"iopub.execute_input\":\"2023-07-19T14:06:39.038647Z\",\"iopub.status.idle\":\"2023-07-19T14:06:39.878739Z\",\"shell.execute_reply.started\":\"2023-07-19T14:06:39.038618Z\",\"shell.execute_reply\":\"2023-07-19T14:06:39.877646Z\"}}\n# Evaluate the accuracy of the trained model\nloss, accuracy = model.evaluate(quantum_val_images, y_val)\nprint(\"Validation accuracy:\", accuracy)\n\n# %% [code]\n\n\n# %% [code]\n# Define the classical neural network model using TensorFlow/Keras\nmodel = tf.keras.Sequential([\n    layers.Dense(64, activation='relu', input_shape=(2 ** num_qubits,)),\n    layers.Dense(10, activation='softmax')\n])\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T11:26:06.518680Z\",\"iopub.execute_input\":\"2023-07-19T11:26:06.519749Z\",\"iopub.status.idle\":\"2023-07-19T11:26:06.529020Z\",\"shell.execute_reply.started\":\"2023-07-19T11:26:06.519708Z\",\"shell.execute_reply\":\"2023-07-19T11:26:06.527700Z\"}}\n\nimport numpy as np\nfrom sklearn.datasets import fetch_openml\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.models import Sequential\nimport tensorflow as tf\nfrom qiskit import Aer, transpile, assemble\nfrom qiskit.visualization import plot_histogram\nfrom qiskit.circuit.library import ZZFeatureMap, TwoLocal\nfrom qiskit_machine_learning.algorithms import VQC\nfrom qiskit_machine_learning.kernels import QuantumKernel\nfrom qiskit.utils import QuantumInstance\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T11:26:09.787253Z\",\"iopub.execute_input\":\"2023-07-19T11:26:09.787689Z\",\"iopub.status.idle\":\"2023-07-19T11:27:27.880232Z\",\"shell.execute_reply.started\":\"2023-07-19T11:26:09.787648Z\",\"shell.execute_reply\":\"2023-07-19T11:27:27.879058Z\"}}\n\n# Load MNIST dataset\nmnist = fetch_openml(name='mnist_784', version=1)\nX, y = mnist['data'], mnist['target']\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T11:47:38.107184Z\",\"iopub.execute_input\":\"2023-07-19T11:47:38.107651Z\",\"iopub.status.idle\":\"2023-07-19T11:47:38.394791Z\",\"shell.execute_reply.started\":\"2023-07-19T11:47:38.107592Z\",\"shell.execute_reply\":\"2023-07-19T11:47:38.393639Z\"}}\n# Convert X dataset to float and normalize to range [0, 1]\nX = X.astype(float) / 255.0\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T11:53:03.145787Z\",\"iopub.execute_input\":\"2023-07-19T11:53:03.146987Z\",\"iopub.status.idle\":\"2023-07-19T11:53:03.189029Z\",\"shell.execute_reply.started\":\"2023-07-19T11:53:03.146944Z\",\"shell.execute_reply\":\"2023-07-19T11:53:03.187604Z\"}}\n# Convert the target labels to one-hot encoding\nlabel_encoder = LabelEncoder()\ninteger_encoded = label_encoder.fit_transform(y)\nonehot_encoder = OneHotEncoder(sparse=False)\ny_onehot = onehot_encoder.fit_transform(integer_encoded.reshape(-1, 1))\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T11:53:19.007494Z\",\"iopub.execute_input\":\"2023-07-19T11:53:19.008636Z\",\"iopub.status.idle\":\"2023-07-19T11:53:19.511873Z\",\"shell.execute_reply.started\":\"2023-07-19T11:53:19.008571Z\",\"shell.execute_reply\":\"2023-07-19T11:53:19.510742Z\"}}\n# Split the data into training, validation, and testing sets\nX_train, X_temp, y_train, y_temp = train_test_split(X, y_onehot, test_size=0.3, random_state=42)\nX_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T11:48:14.619269Z\",\"iopub.execute_input\":\"2023-07-19T11:48:14.620398Z\",\"iopub.status.idle\":\"2023-07-19T11:48:14.628315Z\",\"shell.execute_reply.started\":\"2023-07-19T11:48:14.620355Z\",\"shell.execute_reply\":\"2023-07-19T11:48:14.626896Z\"}}\n# from qiskit import QuantumRegister, QuantumCircuit\n\n# # Encode training and validation images using FRQI\n# def frqi_encoding(image):\n#     desired_length = 2 ** 4  # Length must be a power of 2\n#     if len(image) < desired_length:\n#         padded_image = np.pad(image, (0, desired_length - len(image)), 'constant')\n#     else:\n#         padded_image = image[:desired_length]\n#     norm_value = np.linalg.norm(padded_image)\n#     if norm_value == 0:\n#         return padded_image\n#     padded_image /= norm_value\n#     return padded_image\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T11:48:28.040863Z\",\"iopub.execute_input\":\"2023-07-19T11:48:28.041292Z\",\"iopub.status.idle\":\"2023-07-19T11:48:33.734927Z\",\"shell.execute_reply.started\":\"2023-07-19T11:48:28.041256Z\",\"shell.execute_reply\":\"2023-07-19T11:48:33.733003Z\"}}\n# device_name = tf.test.gpu_device_name()\n# if device_name != '/device:GPU:0':\n#     print('GPU device not found. Using CPU instead.')\n#     device_name = '/device:CPU:0'\n\n# # Assign the process to a GPU\n# with tf.device(device_name):\n#     # Encode training and testing images using FRQI\n#     frqi_train_images = [frqi_encoding(image) for image in X_train]\n#     frqi_val_images = [frqi_encoding(image) for image in X_val]\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T11:56:04.452089Z\",\"iopub.execute_input\":\"2023-07-19T11:56:04.452525Z\",\"iopub.status.idle\":\"2023-07-19T11:56:04.923695Z\",\"shell.execute_reply.started\":\"2023-07-19T11:56:04.452492Z\",\"shell.execute_reply\":\"2023-07-19T11:56:04.922473Z\"}}\n# Split the data into training, validation, and testing sets\nX_train, X_temp, y_train, y_temp = train_test_split(X, y_onehot, test_size=0.3, random_state=42)\nX_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T11:57:03.782524Z\",\"iopub.execute_input\":\"2023-07-19T11:57:03.783577Z\",\"iopub.status.idle\":\"2023-07-19T11:57:03.793375Z\",\"shell.execute_reply.started\":\"2023-07-19T11:57:03.783535Z\",\"shell.execute_reply\":\"2023-07-19T11:57:03.792013Z\"}}\nimport numpy as np\nfrom sklearn.datasets import fetch_openml\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.models import Sequential\nimport tensorflow as tf\nfrom qiskit import Aer, transpile, assemble\nfrom qiskit.visualization import plot_histogram\nfrom qiskit.circuit.library import ZZFeatureMap, TwoLocal\nfrom qiskit_machine_learning.algorithms import VQC\nfrom qiskit_machine_learning.kernels import QuantumKernel\nfrom qiskit.utils import QuantumInstance\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:25:35.293300Z\",\"iopub.execute_input\":\"2023-07-19T13:25:35.293794Z\",\"iopub.status.idle\":\"2023-07-19T13:25:35.302714Z\",\"shell.execute_reply.started\":\"2023-07-19T13:25:35.293751Z\",\"shell.execute_reply\":\"2023-07-19T13:25:35.301479Z\"}}\n# Define quantum feature map and ansatz\nnum_qubits = 4\nfeature_map = ZZFeatureMap(feature_dimension=num_qubits, reps=2)\nansatz = TwoLocal(num_qubits, ['ry', 'rz'], 'cz')\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:25:37.211283Z\",\"iopub.execute_input\":\"2023-07-19T13:25:37.211746Z\",\"iopub.status.idle\":\"2023-07-19T13:25:37.218364Z\",\"shell.execute_reply.started\":\"2023-07-19T13:25:37.211708Z\",\"shell.execute_reply\":\"2023-07-19T13:25:37.216805Z\"}}\n# Define the quantum instance\nquantum_instance = QuantumInstance(Aer.get_backend('statevector_simulator'))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:25:40.619172Z\",\"iopub.execute_input\":\"2023-07-19T13:25:40.622261Z\",\"iopub.status.idle\":\"2023-07-19T13:25:40.629313Z\",\"shell.execute_reply.started\":\"2023-07-19T13:25:40.622214Z\",\"shell.execute_reply\":\"2023-07-19T13:25:40.628014Z\"}}\nfrom qiskit.algorithms.optimizers import COBYLA\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:25:42.146400Z\",\"iopub.execute_input\":\"2023-07-19T13:25:42.147940Z\",\"iopub.status.idle\":\"2023-07-19T13:25:42.153635Z\",\"shell.execute_reply.started\":\"2023-07-19T13:25:42.147890Z\",\"shell.execute_reply\":\"2023-07-19T13:25:42.152019Z\"}}\n# Define the optimizer\noptimizer = COBYLA(maxiter=100)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:25:44.193961Z\",\"iopub.execute_input\":\"2023-07-19T13:25:44.194780Z\",\"iopub.status.idle\":\"2023-07-19T13:25:44.282863Z\",\"shell.execute_reply.started\":\"2023-07-19T13:25:44.194739Z\",\"shell.execute_reply\":\"2023-07-19T13:25:44.281537Z\"}}\n# Build the Quantum SVM model\nmodel = VQC(\n    feature_map=feature_map,\n    ansatz=ansatz,\n    optimizer=optimizer,\n    quantum_instance=quantum_instance\n)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T13:25:49.075250Z\",\"iopub.execute_input\":\"2023-07-19T13:25:49.076048Z\",\"iopub.status.idle\":\"2023-07-19T13:25:49.136088Z\",\"shell.execute_reply.started\":\"2023-07-19T13:25:49.075999Z\",\"shell.execute_reply\":\"2023-07-19T13:25:49.133282Z\"}}\nimport numpy as np\nfrom sklearn.datasets import fetch_openml\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom qiskit import Aer\nfrom qiskit.circuit.library import ZZFeatureMap, TwoLocal\nfrom qiskit_machine_learning.algorithms import VQC\nfrom qiskit_machine_learning.kernels import QuantumKernel\nfrom qiskit_machine_learning.dataset_builders import split_dataset_to_data_and_labels\nfrom qiskit.utils import QuantumInstance\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T12:12:54.411968Z\",\"iopub.execute_input\":\"2023-07-19T12:12:54.412396Z\",\"iopub.status.idle\":\"2023-07-19T12:12:54.467919Z\",\"shell.execute_reply.started\":\"2023-07-19T12:12:54.412358Z\",\"shell.execute_reply\":\"2023-07-19T12:12:54.466225Z\"}}\n# Convert data to data and labels format for Qiskit Aqua\ntrain_data, _ = split_dataset_to_data_and_labels(X_train, y_train)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T12:32:26.907309Z\",\"iopub.execute_input\":\"2023-07-19T12:32:26.907773Z\",\"iopub.status.idle\":\"2023-07-19T12:32:27.473503Z\",\"shell.execute_reply.started\":\"2023-07-19T12:32:26.907736Z\",\"shell.execute_reply\":\"2023-07-19T12:32:27.471314Z\"}}\ndevice_name = tf.test.gpu_device_name()\nif device_name != '/device:GPU:0':\n    print('GPU device not found. Using CPU instead.')\n    device_name = '/device:CPU:0'\n\n# Assign the process to a GPU\nwith tf.device(device_name):\n    \n    \n    # Train the model using the training data\n    model.fit(X_train, y_train)\n\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T08:44:50.196025Z\",\"iopub.execute_input\":\"2023-07-19T08:44:50.196432Z\",\"iopub.status.idle\":\"2023-07-19T08:44:50.695996Z\",\"shell.execute_reply.started\":\"2023-07-19T08:44:50.196401Z\",\"shell.execute_reply\":\"2023-07-19T08:44:50.694877Z\"}}\n# Reshape the statevectors to match the input shape of the neural network\nfrqi_train_statevectors = np.array(frqi_train_statevectors).reshape(-1, 4)\nfrqi_val_statevectors = np.array(frqi_val_statevectors).reshape(-1, 4)\nfrqi_test_statevectors = np.array(frqi_test_statevectors).reshape(-1, 4)\n\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T08:45:05.836176Z\",\"iopub.execute_input\":\"2023-07-19T08:45:05.836547Z\",\"iopub.status.idle\":\"2023-07-19T08:45:05.886740Z\",\"shell.execute_reply.started\":\"2023-07-19T08:45:05.836515Z\",\"shell.execute_reply\":\"2023-07-19T08:45:05.885731Z\"}}\n# Build a simple neural network for classification\nmodel = Sequential()\nmodel.add(Dense(32, activation='relu', input_shape=(4,)))  # 4 qubits for FRQI encoding\nmodel.add(Dense(num_classes, activation='softmax'))  # Output layer with 10 classes\n\n# Compile the model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T08:45:27.037408Z\",\"iopub.execute_input\":\"2023-07-19T08:45:27.037815Z\",\"iopub.status.idle\":\"2023-07-19T08:45:27.248445Z\",\"shell.execute_reply.started\":\"2023-07-19T08:45:27.037783Z\",\"shell.execute_reply\":\"2023-07-19T08:45:27.246546Z\"}}\ndevice_name = tf.test.gpu_device_name()\nif device_name != '/device:GPU:0':\n    print('GPU device not found. Using CPU instead.')\n    device_name = '/device:CPU:0'\n\n# Assign the process to a GPU\nwith tf.device(device_name):\n    \n    # Train the model on the training data\n    model.fit(frqi_train_statevectors, y_train_onehot, epochs=10, batch_size=32, validation_data=(frqi_val_statevectors, y_val_onehot))\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-07-19T08:11:02.675431Z\",\"iopub.status.idle\":\"2023-07-19T08:11:02.676195Z\",\"shell.execute_reply.started\":\"2023-07-19T08:11:02.675925Z\",\"shell.execute_reply\":\"2023-07-19T08:11:02.675950Z\"}}\ndevice_name = tf.test.gpu_device_name()\nif device_name != '/device:GPU:0':\n    print('GPU device not found. Using CPU instead.')\n    device_name = '/device:CPU:0'\n\n# Assign the process to a GPU\nwith tf.device(device_name):\n    # Evaluate the model on the testing data\n    accuracy = model.evaluate(np.array(frqi_test_statevectors), y_test_onehot)[1]\n    print(\"Test Accuracy:\", accuracy)\n\n# %% [code]\n","metadata":{"_uuid":"dff1f61e-7a0c-4932-ab10-928e77a14d7a","_cell_guid":"a0283cfa-f21b-4c81-8478-dc192fce4438","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}